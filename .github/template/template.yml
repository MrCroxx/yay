name:

on:

env:
  RUST_TOOLCHAIN_NIGHTLY: nightly-2024-03-17
  CARGO_TERM_COLOR: always
  CACHE_KEY_SUFFIX: 20240514

jobs:
  misc-check:
    name: misc check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run typos check
        uses: crate-ci/typos@master
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${BINARY}.tar.gz -O - | tar xz && sudo mv ${BINARY} /usr/bin/yq
        env:
          YQ_VERSION: v4.16.1
          BINARY: yq_linux_amd64
          BUF_VERSION: 1.0.0-rc6
      - name: Install jq
        uses: dcarbone/install-jq-action@v2.0.2
      - name: Check if CI workflows are up-to-date
        run: |
          ./.github/template/generate.sh --check
  rust-udeps:
    name: rust udeps test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Cache Cargo home
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ env.CACHE_KEY_SUFFIX }}-rust-udeps
      - name: Install cargo-binstall
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Install cargo-udeps
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo binstall -y cargo-udeps --locked
      - name: Unused Dependencies Check
        env:
          RUSTFLAGS: "--cfg tokio_unstable -Awarnings"
        run: |
          cargo udeps --all-targets  
  rust-test:
    name: rust test with codecov
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust_toolchain: [stable, 1.76]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          components: rustfmt, clippy, llvm-tools-preview
      - name: Cache Cargo home
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ env.CACHE_KEY_SUFFIX }}-rust-test
      - name: Install cargo-binstall
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Install cargo tools
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cargo binstall -y cargo-sort
      - name: Run rust cargo-sort check
        run: |
          cargo sort -w -c
      - name: Run rust format check
        run: |
          cargo fmt --all -- --check
      - name: Run rust clippy check
        run: |
          cargo clippy --all-targets -- -D warnings
      - if: steps.cache.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@cargo-llvm-cov
      - if: steps.cache.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@nextest
      - name: Run rust test with coverage (igored tests)
        env:
          RUST_BACKTRACE: 1
          CI: true
        run: |
          cargo llvm-cov --no-report nextest --run-ignored ignored-only --no-capture --workspace
      - name: Run rust test with coverage
        env:
          RUST_BACKTRACE: 1
          CI: true
        run: |
          cargo llvm-cov --no-report nextest
      - name: Generate codecov report
        run: |
          cargo llvm-cov report --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.rust_toolchain == 'stable'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          verbose: true
